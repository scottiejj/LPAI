if (!file.exists(id_mapping_path)) {
stop("The id_mapping.csv file is missing from the package.")
}
id_mapping <- read.csv(id_mapping_path, stringsAsFactors = FALSE)
# Rename columns
seqid_old<-colnames(test_data[protein_indices])
uniprot <- ifelse(seqid_old %in% id_mapping$seqid,
yes=id_mapping$uniprot[match(seqid_old, id_mapping$seqid)],
no=seqid_old)
seqid_dup<-seqid_old[duplicated(uniprot)]
test_data<-test_data%>%select(-all_of(seqid_dup))
# Subset id_mapping to include only columns in test_data
relevant_mapping <- id_mapping[id_mapping$seqid %in% colnames(test_data), ]
test_data_new <- test_data%>%
dplyr::rename_with(
.cols = relevant_mapping$seqid,
.fn = ~ dplyr::recode(., !!!setNames(relevant_mapping$uniprot, relevant_mapping$seqid))
)%>%as.data.frame()
protein_indices <- protein_indices[!duplicated(uniprot)]
}
else{
test_data_new <- test_data
}
# Initialize a list to store FPC scores for each protein
score_list <- list()
# Loop through each protein index
for (protein_index in protein_indices) {
# Get protein name
protein_name <- colnames(test_data_new)[protein_index]
# Check if a trained model exists for this protein
if (!protein_name %in% names(trained_models)) {
message(sprintf("Protein: %s not found in pre-trained FPCA models. Skipping this protein.", names(test_data_new)[protein_index]))
next
}
print(sprintf("Calculating FPC scores for protein %s ",protein_name))
# Prepare test data for the current protein
data_wide <- prepare_data(test_data_new, protein_index)
# Create Ly and Lt lists for prediction
Ly_list <- lapply(2:ncol(data_wide), function(x) na.omit(data_wide[[x]]))
Lt_list <- lapply(2:ncol(data_wide), function(x) data_wide$age[!is.na(data_wide[[x]])])
# Get the trained FPCA model
fpca_model <- trained_models[[protein_name]][["fpca_model"]]
# Predict FPCA scores
predicted_scores <- predict(fpca_model, newLy = Ly_list, newLt = Lt_list)
# Extract the first two FPC scores and name the columns
fpc_scores <- predicted_scores$scores[, 1:nFPCs, drop = FALSE]
colnames(fpc_scores) <- paste0(protein_name, "_FPC", 1:nFPCs)
# Add the scores to the list
score_list[[protein_name]] <- fpc_scores
}
# Combine all scores into a single data frame
id=colnames(data_wide)[-1]
final_scores <- as.data.frame(do.call(cbind, score_list))
final_scores <- cbind(id, final_scores)
# Return the combined data frame
return(final_scores)
}
MESA.test.LPAI<-get_LPAI(MESA.test_fpc_scores,aric_coef)
hist(MESA.test.LPAI)
names(MESA_demographics_data)
MESA.surv.data=data.frame(id=MESA_demographics_data$id,
futime=MESA_demographics_data$death_fuptt,
event= Death)
MESA.surv.data=data.frame(id=MESA_demographics_data$id,
futime=MESA_demographics_data$death_fuptt,
event= MESA_demographics_data$Death)
q<-merge(MESA.test.LPAI,MESA.surv.data,by="id")
survival::coxph(Surv(futime,event)~LPAI,data=q)
survival::coxph(Surv(futime,event)~LPAI,data=q)%>%summary()
MESA.test_fpc_scores<-predict_protein_FPCscores(MESA.data, trained_models = ARIC_trained_models,protein_indices=(4:4955),nFPCs=2,Seqid=T)
#' Predict Functional Principal Component (FPC) Scores for Test Data
#'
#' This function predicts FPC scores for test data using trained FPCA models.
#' It validates input data, handles duplicate observations, filters out age values outside the training range,
#' and returns the requested FPC scores for each protein.
#'
#' @param test_data A data frame containing test data with columns `id`, `age`, and protein data.
#' @param trained_models A named list of trained FPCA models.
#' @param protein_indices A numeric vector specifying the column indices of protein data in `test_data`.
#' @param nFPCs An integer specifying the number of FPC scores to extract. Default is 2.
#' @param Seqid Logical. If `T`, rename user columns to UniProt IDs. Default is `F`.
#' @return A data frame with rows corresponding to test samples, containing `id` and FPC scores for each protein.
#'
#' @importFrom dplyr rename_with recode group_by filter pull n
#' @importFrom tidyr pivot_wider
#' @examples
#' \dontrun{
#' # Example usage
#'data("ARIC_trained_models")
#'
#' Simulated data
#' example_test_data <- data.frame(
#'  id = rep(20:29, each = 3),  # IDs, each individual has 3 observations
#'  age = rep(49:58, times = 3),  # Ages for repeated measures
#'  Q96PQ1 = rnorm(10*3, mean = 10, sd = 2),  # Simulated protein 1 measurements
#'  P25440 = rnorm(10*3, mean = 5, sd = 1)  # Simulated protein 2 measurements
#')
#' test.fpc.scores <- predict_fpca_scores(
#'   test_data = example_test_data,
#'   trained_models = ARIC_trained_models,
#'   protein_indices = c(3, 4),
#'   nFPCs = 2
#' )
#' print(test.fpc.scores)
#' }
#' @export
#'
#'
predict_protein_FPCscores <- function(test_data, trained_models = ARIC_trained_models, protein_indices,nFPCs=2, Seqid=F) {
# Validate input: Ensure required columns are present
if (!all(c("id", "age") %in% colnames(test_data))) {
stop("The test data must include 'id' and 'age' columns.")
}
# Ensure age is an integer
test_data$age <- floor(test_data$age)
# Validate protein indices
if (any(protein_indices <= 0 | protein_indices > ncol(test_data))) {
stop("Invalid protein_indices: Ensure indices match the column positions in the test data.")
}
# Ensure required packages are available
required_packages <- c("fdapace")
missing_packages <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
if (length(missing_packages) > 0) {
stop(
"The following required packages are missing: ",
paste(missing_packages, collapse = ", "),
". Please install them and try again."
)
}
#Check duplicate age
dup<-test_data %>%
group_by(id,age) %>%
filter(n() > 1) %>%
pull(id)
if(length(dup)>1){
stop(sprintf(
"Duplicated IDs with duplicate age values found: %s. These observations have been removed.",
paste(dup, collapse = ", ")
))
}
# Get the age range from the first trained model
first_model <- trained_models[[1]][["fpca_model"]]
age_range <- range(first_model$workGrid)
# Filter out observations with age outside the range
out_of_range <- test_data$age < age_range[1] | test_data$age > age_range[2]
if (any(out_of_range)) {
warning(sprintf(
"%d observations were removed because their age values were outside the training range [%f, %f].",
sum(out_of_range), age_range[1], age_range[2]
))
}
test_data <- test_data[!out_of_range, ]
# Rename columns if Seqid is TRUE
if (Seqid) {
print("Renaming your data columns to UniProt IDs")
id_mapping_path <- system.file("extdata", "id_mapping.csv", package = "LPAI")
if (!file.exists(id_mapping_path)) {
stop("The id_mapping.csv file is missing from the package.")
}
id_mapping <- read.csv(id_mapping_path, stringsAsFactors = FALSE)
# Rename columns
seqid_old<-colnames(test_data[protein_indices])
uniprot <- ifelse(seqid_old %in% id_mapping$seqid,
yes=id_mapping$uniprot[match(seqid_old, id_mapping$seqid)],
no=seqid_old)
seqid_dup<-seqid_old[duplicated(uniprot)]
test_data<-test_data%>%select(-all_of(seqid_dup))
# Subset id_mapping to include only columns in test_data
relevant_mapping <- id_mapping[id_mapping$seqid %in% colnames(test_data), ]
test_data_new <- test_data%>%
dplyr::rename_with(
.cols = relevant_mapping$seqid,
.fn = ~ dplyr::recode(., !!!setNames(relevant_mapping$uniprot, relevant_mapping$seqid))
)%>%as.data.frame()
}
else{
test_data_new <- test_data
}
# Initialize a list to store FPC scores for each protein
score_list <- list()
# Loop through each protein index
for (protein_index in protein_indices) {
# Get protein name
protein_name <- colnames(test_data_new)[protein_index]
# Check if a trained model exists for this protein
if (!protein_name %in% names(trained_models)) {
if(is.na(protein_name)){
next
}
message(sprintf("%s not found in pre-trained FPCA models. Skipping.", names(test_data_new)[protein_index]))
next
}
print(sprintf("Calculating FPC scores for protein %s ",protein_name))
# Prepare test data for the current protein
data_wide <- prepare_data(test_data_new, protein_index)
# Create Ly and Lt lists for prediction
Ly_list <- lapply(2:ncol(data_wide), function(x) na.omit(data_wide[[x]]))
Lt_list <- lapply(2:ncol(data_wide), function(x) data_wide$age[!is.na(data_wide[[x]])])
# Get the trained FPCA model
fpca_model <- trained_models[[protein_name]][["fpca_model"]]
# Predict FPCA scores
predicted_scores <- predict(fpca_model, newLy = Ly_list, newLt = Lt_list)
# Extract the first two FPC scores and name the columns
fpc_scores <- predicted_scores$scores[, 1:nFPCs, drop = FALSE]
colnames(fpc_scores) <- paste0(protein_name, "_FPC", 1:nFPCs)
# Add the scores to the list
score_list[[protein_name]] <- fpc_scores
}
# Combine all scores into a single data frame
id=colnames(data_wide)[-1]
final_scores <- as.data.frame(do.call(cbind, score_list))
final_scores <- cbind(id, final_scores)
# Return the combined data frame
return(final_scores)
}
MESA.test_fpc_scores<-predict_protein_FPCscores(MESA.data, trained_models = ARIC_trained_models,protein_indices=(4:4955),nFPCs=2,Seqid=T)
sum(aric_coef!=0)
aric_coef
s <- gsub(names(aric_ceof), "_.*$", "")
s <- gsub(names(aric_coef), "_.*$", "")
s <- gsub(names(aric_coef), "_.*", "")
s <- gsub(x=names(aric_coef), pattern="_.*$", "")
s
s%>%unique()
s <- gsub(x=names(aric_coef[which(aric_coef!=0), pattern="_.*$", "")
s <- gsub(x=names(aric_coef[which(aric_coef!=0)], pattern="_.*$", "")%>%unique()
s <- gsub(x=names(aric_coef[which(aric_coef!=0)]), pattern="_.*$", "")%>%unique()
s <- gsub(x=names(aric_coef[which(aric_coef!=0)]), pattern="_.*$", "")%>%unique()
s
s%>%length()
test.data <- data.frame(
id = rep(20:29, each = 3),  # IDs, each individual has 3 observations
age = rep(49:58, times = 3),  # Ages for repeated measures
SeqId_10000_28 = rnorm(10*3, mean = 10, sd = 2),  # Simulated protein 1 measurements
SeqId_10001_7 = rnorm(10*3, mean = 5, sd = 1) , # Simulated protein 2 measurements
SeqId_10615_18=rnorm(10*3, mean = 5, sd = 1)
)
test.fpc.scores=predict_protein_FPCscores(test_data=test.data, trained_models=ARIC_trained_models, protein_indices=c(4:4955),nFPCs=2, Seqid=T)
test.fpc.scores=predict_protein_FPCscores(test_data=test.data, trained_models=ARIC_trained_models, protein_indices=c(3:5),nFPCs=2, Seqid=T)
MESA.data
View(MESA.data)
test.data <- data.frame(
id = rep(1:20, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(40:80,20), times = 3),  # Ages for repeated measures
SeqId_10000_28 = rnorm(20*3, mean = 10, sd = 2),  # Simulated protein 1 measurements
SeqId_10001_7 = rnorm(20*3, mean = 7, sd = 1) , # Simulated protein 2 measurements
SeqId_10615_18=rnorm(20*3, mean = 8, sd = 1)
)
test.fpc.scores=predict_protein_FPCscores(test_data=test.data, trained_models=ARIC_trained_models, protein_indices=c(3:5),nFPCs=2, Seqid=T)
test.data
lpai<- get_LPAI(test.fpc.scores, cox_coefs=aric_coef)
lpai
test.data
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 100,replace = F), times = 3),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
?rep
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 3,replace = F), times = 100),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
n <- 300
age_range <- 50:85
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 3,replace = F), times = 100),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
result <- train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
train.data
print(result[["P25440"]])
#' Train FPCA Models for Proteins
#'
#' Trains Functional Principal Component Analysis (FPCA) models for specified protein columns in the dataset using parallel processing.
#'
#' @param data A data frame containing `id`, `age`, and protein columns.
#' @param protein_indices Numeric vector of column indices for the protein data in `data`.
#' @param cores Number of cores for parallel computation (default: 1).
#' @return A named list where each element corresponds to a protein, containing:
#' \describe{
#'   \item{fpca_model}{The trained FPCA model.}
#'   \item{train_scores}{Data frame of FPCA scores for each sample.}
#' }
#'
#' @importFrom foreach foreach
#' @importFrom doFuture registerDoFuture
#' @importFrom future plan multisession
#' @importFrom dplyr group_by filter pull n
#' @importFrom tidyr pivot_wider
#' @importFrom fdapace FPCA
#' @importFrom magrittr %>%
#' @importFrom doRNG %dorng%
#'
#' @examples
#' \dontrun{
#'age_range <- 50:85
#'n <- 300
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 3,replace = F), times = 100),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
#'
#' result <- train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
#' print(result[["P25440"]])
#' }
#' @export
#'
train_FPCA_protein <- function(data, protein_indices, cores = 1) {
# Check for required packages
required_packages <- c("fdapace", "foreach", "doFuture", "doRNG","LPAI")
missing_packages <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
if (length(missing_packages) > 0) {
stop(
"The following required packages are missing: ",
paste(missing_packages, collapse = ", "),
". Please install them and try again."
)
}
# Validate input
required_columns <- c("id", "age")
missing_columns <- required_columns[!required_columns %in% colnames(data)]
if (length(missing_columns) > 0) {
stop(sprintf("The following required columns are missing from the data: %s. Please include them.",
paste(missing_columns, collapse = ", ")))
}
data$age<-floor(data$age) #Ensure age is an integer
if (any(protein_indices <= 0 | protein_indices > ncol(data))) {
stop("Invalid 'protein_indices': Ensure they are positive integers and within the range of column indices in the data.")
}
protein_names <- colnames(data)[protein_indices]
#Check duplicate age
dup<-data %>%
group_by(id,age) %>%
filter(n() > 1) %>%
pull(id)
if(length(dup)>1){
stop("Duplicate age values for same ID found in the data. Please ensure each age value is unique.")
}
# Set up parallel processing with doFuture
doFuture::registerDoFuture()
future::plan(future::multisession, workers = cores)
# Parallel loop to train FPCA models
results <-foreach(
protein_index = protein_indices,
.packages = c("fdapace", "dplyr", "tidyr", "magrittr","LPAI"),
.export = c("prepare_data"),.multicombine=TRUE
) %dorng% {
# Get column name for the current index
protein_name <- colnames(data)[protein_index]
# Prepare data for this protein
data_wide <- prepare_data(data, protein_index)
# Create Ly and Lt lists for FPCA
Ly_list <- lapply(2:ncol(data_wide), function(x) na.omit(data_wide[[x]]))
Lt_list <- lapply(2:ncol(data_wide), function(x) data_wide$age[!is.na(data_wide[[x]])])
sample_ids <- colnames(data_wide)[-1]
# Train FPCA model
fpca_model <- FPCA(Ly = Ly_list, Lt = Lt_list, optns = list(dataType="Sparse"))
# FPCA scores
scores <- data.frame(id = sample_ids, fpca_model$xiEst)
# Remove unnecessary objects to free memory
rm(Ly_list, Lt_list, data_wide)
gc()
# Return results for this protein
list(
fpca_model = fpca_model,
train_scores = scores
)
}
# Set names for results using protein name
print((results))
names(results)<-protein_names
results <- lapply(results, function(x) {
attr(x, "rng") <- NULL
return(x)
})
return(results)
}
age_range <- 50:60
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 3,replace = F), times = 100),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
age_range <- 50:60
n_ids <- 100
n_obs_per_id <- 3
n_total_obs <- n_ids * n_obs_per_id
train.data <- data.frame(
id = rep(1:n_ids, each = n_obs_per_id),  # IDs, each individual has 3 observations
age = age_list,                          # Ages for repeated measures
Q96PQ1 = rnorm(n_total_obs, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n_total_obs, mean = 5, sd = 1)    # Simulated protein 2 measurements
)
age_range <- 50:60
n_ids <- 100
n_obs_per_id <- 3
n_total_obs <- n_ids * n_obs_per_id
age_list <- sample(age_range, size = n_total_obs, replace = TRUE)
train.data <- data.frame(
id = rep(1:n_ids, each = n_obs_per_id),  # IDs, each individual has 3 observations
age = age_list,                          # Ages for repeated measures
Q96PQ1 = rnorm(n_total_obs, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n_total_obs, mean = 5, sd = 1)    # Simulated protein 2 measurements
)
train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
age_range <- 50:60
n_ids <- 100
n_obs_per_id <- 3
n_total_obs <- n_ids * n_obs_per_id
age_list <- sample(age_range, size = n_total_obs, replace = F)
age_range <- 50:70
n_ids <- 100
n_obs_per_id <- 3
n_total_obs <- n_ids * n_obs_per_id
age_list <- sample(age_range, size = n_total_obs, replace = TRUE)
train.data <- data.frame(
id = rep(1:n_ids, each = n_obs_per_id),  # IDs, each individual has 3 observations
age = age_list,                          # Ages for repeated measures
Q96PQ1 = rnorm(n_total_obs, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n_total_obs, mean = 5, sd = 1)    # Simulated protein 2 measurements
)
result <- train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
train.data <- data.frame(
id = rep(1:100, each = 3),  # IDs, each individual has 3 observations
age = rep(sample(age_range,size = 3,replace = F), times = 100),  # Ages for repeated measures
Q96PQ1 = rnorm(n, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
train.data
n <- 20
age_range <- 50:85
train.data <- data.frame(
id = rep(1:n , each = 3),  # IDs, each individual has 3 observations
age = rep(age_range, times = n *3),  # Ages for repeated measures
Q96PQ1 = rnorm(n*3, mean = 10, sd = 2),  # Simulated protein 1 measurements
P25440 = rnorm(n*3, mean = 5, sd = 1)  # Simulated protein 2 measurements
)
train_FPCA_protein(train.data, protein_indices = 3:4, cores = 2)
MESA.data
q<-MESA.data[,1:4]
q
q<-MESA.data[,1:5]%>%arrange(id)
q
q<-MESA.data[,1:5]%>%arrange(id)[1:99,]
q<-MESA.data[,1:5]%>%arrange(id)%>%slice(1:150)
q
q<-MESA.data[,1:5]%>%arrange(id)%>%slice(1:150)%>%seelct(-visit)
q<-MESA.data[,1:5]%>%arrange(id)%>%slice(1:150)%>%select(-visit)
q$id<-red(1:50,each=3)
q$id<-rep(1:50,each=3)
q
example.data<-q
example.train.data<-q
q<-MESA.data[,1:5]%>%arrange(id)%>%slice(151:300)%>%select(-visit)
q$id<-rep(51:100,each=3)
example.test.data<-q
getwd()
setwd("/Users/scottiejj/Desktop/LPAI/")
save(example.train.data,"example.train.data.rda")
save(example.train.data,file = "example.train.data.rda")
save(example.test.data,file = "example.test.data.rda")
result <- train_FPCA_protein(example.train.data, protein_indices = 3:4, cores = 2)
example.train.data
example.train.data<-data.frame(example.train.data)
save(example.train.data,file = "example.train.data.rda")
example.test.data<-data.frame(example.test.data)
save(example.test.data,file = "example.test.data.rda")
result <- train_FPCA_protein(example.train.data, protein_indices = 3:4, cores = 2)
print(result[[1]])
test_fpc_scores <- predict_protein_FPCscores(
test_data = example_test_data,
trained_models = ARIC_trained_models,
protein_indices = c(3, 4),
nFPCs = 2
)
test_fpc_scores <- predict_protein_FPCscores(
test_data = example.test.data,
trained_models = ARIC_trained_models,
protein_indices = c(3, 4),
nFPCs = 2
)
test_fpc_scores <- predict_protein_FPCscores(
test_data = example.test.data,
trained_models = ARIC_trained_models,
protein_indices = c(3, 4),
nFPCs = 2,Seqid = T
)
print(test_fpc_scores)
example.test.data
data(ARIC_trained_models)
data(example.test.data)
data(aric_coef)
# Predict FPC scores
test_fpc_scores <- predict_protein_FPCscores(
test_data = example.test.data,
trained_models = ARIC_trained_models,
protein_indices = c(3, 4),
nFPCs = 2,Seqid = T
)
print(test_fpc_scores)
lpai<-get_LPAI(test_fpc_scores, aric_coef)
print(lpai)
